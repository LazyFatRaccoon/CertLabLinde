// src/pages/CertificateRequest.jsx
import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { api } from "@/api/axiosInstance";
import { tokenStore } from "@/api/tokenSore";
import { toast } from "react-toastify";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import DatePicker from "@/components/ui/datepicker"; // –±—É–¥—å-—è–∫–∏–π date-picker

const PRODUCTS = [
  "–û–∫—Å–∏–≥–µ–Ω –º–µ–¥–∏—á–Ω–∏–π",
  "–ê–∑–æ—Ç",
  "–ê—Ä–≥–æ–Ω",
  "–ì–µ–ª—ñ–π",
  "–í—É–≥–ª–µ–∫–∏—Å–ª–∏–π –≥–∞–∑",
];
const todayUi = () =>
  new Date().toLocaleDateString("uk-UA").replace(/\//g, ".");

export default function CertificateRequest() {
  const [form, setForm] = useState({
    product: PRODUCTS[0],
    date: todayUi(), // DD.MM.YYYY
    batch: "",
  });
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!form.batch.trim()) return toast.error("–í–∫–∞–∂—ñ—Ç—å –ø–∞—Ä—Ç—ñ—é");
    setLoading(true);
    try {
      // üîó  –∑–∞–ø—Ä–æ—Å–∏—Ç–∏ PDF
      const { data } = await api.post(
        "/public/certificates", // ‚Üê –ø—É–±–ª—ñ—á–Ω–∏–π ‚Äúno-auth‚Äù –µ–Ω–¥-–ø–æ—ó–Ω—Ç
        form,
        { responseType: "blob" } // –æ—Ç—Ä–∏–º—É—î–º–æ —Ñ–∞–π–ª
      );
      // üíæ  —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è —Å–∫–∞—á—É–≤–∞–Ω–Ω—è
      const url = URL.createObjectURL(
        new Blob([data], { type: "application/pdf" })
      );
      const a = document.createElement("a");
      a.href = url;
      a.download = `certificate-${form.batch}.pdf`;
      a.click();
      URL.revokeObjectURL(url);
      toast.success("‚úÖ –°–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –π –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ");
    } catch (e) {
      if (e.response?.status === 404) {
        toast.info("–°–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üòï");
      } else {
        const msg =
          e.response?.data?.message ?? "–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∞";
        toast.error(`‚ùå ${msg}`);
      }
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="max-w-md m-20 mx-auto p-6 space-y-4">
      <h1 className="text-2xl font-bold mb-2">–ó–∞–º–æ–≤–∏—Ç–∏ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç</h1>
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label>–ü—Ä–æ–¥—É–∫—Ç</label>
          <select
            className="w-full border p-2 rounded"
            value={form.product}
            onChange={(e) => setForm({ ...form, product: e.target.value })}
          >
            {PRODUCTS.map((p) => (
              <option key={p}>{p}</option>
            ))}
          </select>
        </div>

        <div>
          <label>–î–∞—Ç–∞</label>
          <DatePicker
            value={form.date}
            onChange={(d) => setForm({ ...form, date: d })}
          />
        </div>

        <div>
          <label>–ü–∞—Ä—Ç—ñ—è</label>
          <Input
            value={form.batch}
            onChange={(e) => setForm({ ...form, batch: e.target.value })}
          />
        </div>

        <Button disabled={loading}>
          {loading ? "–ü–æ—à—É–∫‚Ä¶" : "–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç"}
        </Button>
        <Button
          type="button"
          variant="outline"
          className="absolute left-4 top-4"
          onClick={() =>
            tokenStore.get() ? navigate("/") : navigate("/login")
          }
        >
          –ù–∞–∑–∞–¥ –¥–æ {tokenStore.get() ? "–ø—Ä–æ–≥—Ä–∞–º–∏" : "–≤—Ö–æ–¥—É"}
        </Button>
      </form>
    </div>
  );
}
